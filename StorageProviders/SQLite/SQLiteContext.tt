<#@ template language="C#" debug="True" hostSpecific="True" #>
<#@ output extension=".generated.cs"                        #>

<#@ include file="$(LinqToDBT4SQLiteTemplatesPath)LinqToDB.SQLite.Tools.ttinclude" once="true" #>
<#@ include file="$(LinqToDBT4SQLiteTemplatesPath)PluralizationService.ttinclude"  once="true" #>
<#
	
	NamespaceName = "StorageProviders.NetCore.DBs.SQLite";
	GetSchemaOptions.GetTables             = true;

	GetSchemaOptions.GetForeignKeys        = true;

	GetSchemaOptions.GetProcedures         = true;

	GetSchemaOptions.GenerateChar1AsString = false;

	GetSchemaOptions.PreferProviderSpecificTypes = false;


	GetSchemaOptions.IncludedSchemas = null;
	GetSchemaOptions.ExcludedSchemas = null;
	GetSchemaOptions.DefaultSchema = null;

	GetSchemaOptions.IncludedCatalogs = null;
	GetSchemaOptions.ExcludedCatalogs = null;
	GetSchemaOptions.LoadProcedure  = _ => true;          
	//GetSchemaOptions.GetAssociationMemberName = true;


	EnableNullableReferenceTypes   = true;

	EnforceModelNullability        = true;
	GenerateDatabaseInfo          = false;
	GenerateConstructors          = true;  


	Func<string, bool> IsValueType = IsValueTypeDefault;
	IsValueType = typeName => {
	
    switch (typeName)
    {
      case "unresolved type name": return true; // or false for reference type
        default: return IsValueTypeDefault(typeName);
    }
	};
	
	GenerateAssociations = true;
	GenerateBackReferences        = true;
	// Enables generation of associations as extension methods for related table mapping classes
	GenerateAssociationExtensions = true;
	DataContextName = "SQLiteProvider";
	GenerateFindExtensions        = true;

	// Enables pluralization of table mapping classes
PluralizeClassNames                 = false;
// Enables singularization of table mapping classes
SingularizeClassNames               = true;
// Enables pluralization of ITable<> properties in data context
PluralizeDataContextPropertyNames   = true;
// Enables singularization of ITable<> properties in data context
SingularizeDataContextPropertyNames = true;

	LoadSQLiteMetadata("Data Source=e:\\StorageDB\\MediaDb.v1.sqlite");
	
	GenerateModel();
				#>
			